[project]
name = "timezonefinder"
version = "8.1.0"
description = "python package for finding the timezone of any point on earth (coordinates) offline"
authors = [{name = "jannikmi", email = "github@michelfe.it"}]
# Replace with license="MIT" with setuptools>=71
license = {file="LICENSE"}
readme = "README.rst"
keywords = ["timezone", "coordinates", "latitude", "longitude", "location", "offline", "polygon"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Localization",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.9,<4"
dependencies = [
    # https://numpy.org/neps/nep-0029-deprecation_policy.html
    "numpy<3,>=1.23; python_version >= '3.9'",
    "h3>4",
    "cffi<3,>=1.15.1",
    "flatbuffers>=25.2.10",
]

[project.urls]
homepage = "https://timezonefinder.michelfe.it/gui"
repository = "https://github.com/jannikmi/timezonefinder"
documentation = "https://timezonefinder.readthedocs.io/en/latest/"

[project.scripts]
timezonefinder = "timezonefinder.command_line:main"

[dependency-groups]
docs = [
    "Sphinx<6,>=5",
    "sphinx-rtd-theme<2,>=1",
]
test=[
    "tox",
    "pytest",
    # used in example scripts
    "pytz>=2022.7.1",
    # setuptoosl required for integration tests: building sdist and wheel
    "setuptools>=61",
    "cffi",
]
# development and parsing data
dev = [
    "tox",
    "pytest",
    "pre-commit",
    "mypy",
    "rstcheck",
    "isort",
    "ruff",
    "cibuildwheel",
    "pydantic>=2.11.7",
]
numba = [
  "numba>=0.56,<1; python_version < '3.12'",
  "numba>=0.59,<1; python_version >= '3.12'",
]
pytz = [
    "pytz>=2022.7.1"
]
# prototyping, performance analytics
proto = [
    "line-profiler>=5.0.0",
    "pandas>=2.3.2",
    "matplotlib>=3.9.4",
    "seaborn>=0.13.2",
    "plotly>=6.3.0",
    "tabulate>=0.9.0",
]

[build-system]
requires = ["setuptools>=61", "cffi"]
# Use setuptools build backend to build CFFI extensions via setup.py
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["timezonefinder", "timezonefinder.inside_poly_extension", "timezonefinder.flatbuf"]

[tool.setuptools.package-data]
timezonefinder = ["**/*.npy", "**/*.fbs", "**/*.txt", "**/*.json", "**/*.c", "**/*.h", ]

[tool.setuptools.data-files]
"." = ["DATA_LICENSE"]

[tool.ruff]
target-version = "py39"
src = ["timezonefinder", "tests", "build.py"]

[tool.ruff.lint.isort]
known-local-folder = ["timezonefinder"]

[tool.pytest.ini_options]
markers = [
    "unit: mark test as a unit test",
    "integration: mark test as an integration test"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing stubs for third-party libraries
[[tool.mypy.overrides]]
module = [
    "flatbuffers",
    "flatbuffers.*",
    "numba",
    "numba.*",
    "h3",
    "h3.*",
]
ignore_missing_imports = true

# Ignore generated/low-level files that are hard to type properly
[[tool.mypy.overrides]]
module = [
    "timezonefinder.flatbuf.generated.*",
    "timezonefinder._numba_replacements",
    "timezonefinder.utils_numba",
    "timezonefinder.np_binary_helpers",
    "timezonefinder.flatbuf.io.*",
    "timezonefinder.coord_accessors",
    "timezonefinder.polygon_array",
    "timezonefinder.utils_clang",
]
ignore_errors = true

# Allow Any for complex numpy dtype cases
[[tool.mypy.overrides]]
module = [
    "timezonefinder.configs",
]
allow_any_generics = true

# Use abi3audit to check wheel abi3 conformance
# A first line in command is a default value
[tool.cibuildwheel.linux]
repair-wheel-command = [
  "auditwheel repair -w {dest_dir} {wheel}",
  "uvx abi3audit --strict --summary {wheel}",
]
[tool.cibuildwheel.macos]
repair-wheel-command = [
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
  "uvx abi3audit --strict --summary {wheel}",
]
[tool.cibuildwheel.windows]
repair-wheel-command = [
  "copy {wheel} {dest_dir}",
  "uvx abi3audit --strict --summary {wheel}",
]

# Pass the environment variable to build the abi3 support
[[tool.cibuildwheel.overrides]]
select = "*"
inherit.environment = "append"
environment.BUILD_ABI3 = "true"
