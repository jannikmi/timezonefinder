# automatically generated by the FlatBuffers compiler, do not modify

# namespace: shortcuts_uint16

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class HybridShortcutCollection:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HybridShortcutCollection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHybridShortcutCollection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # HybridShortcutCollection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HybridShortcutCollection
    def Entries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from timezonefinder.flatbuf.generated.shortcuts_uint16.HybridShortcutEntry import (
                HybridShortcutEntry,
            )

            obj = HybridShortcutEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HybridShortcutCollection
    def EntriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HybridShortcutCollection
    def EntriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def HybridShortcutCollectionStart(builder):
    builder.StartObject(1)


def Start(builder):
    HybridShortcutCollectionStart(builder)


def HybridShortcutCollectionAddEntries(builder, entries):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(entries), 0
    )


def AddEntries(builder, entries):
    HybridShortcutCollectionAddEntries(builder, entries)


def HybridShortcutCollectionStartEntriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartEntriesVector(builder, numElems):
    return HybridShortcutCollectionStartEntriesVector(builder, numElems)


def HybridShortcutCollectionEnd(builder):
    return builder.EndObject()


def End(builder):
    return HybridShortcutCollectionEnd(builder)
