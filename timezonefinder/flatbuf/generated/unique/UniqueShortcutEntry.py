# automatically generated by the FlatBuffers compiler, do not modify

# namespace: unique

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class UniqueShortcutEntry:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UniqueShortcutEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUniqueShortcutEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # UniqueShortcutEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UniqueShortcutEntry
    def HexId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # UniqueShortcutEntry
    def ZoneIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags, o + self._tab.Pos
            )
        return 0


def UniqueShortcutEntryStart(builder):
    builder.StartObject(2)


def Start(builder):
    UniqueShortcutEntryStart(builder)


def UniqueShortcutEntryAddHexId(builder, hexId):
    builder.PrependUint64Slot(0, hexId, 0)


def AddHexId(builder, hexId):
    UniqueShortcutEntryAddHexId(builder, hexId)


def UniqueShortcutEntryAddZoneIndex(builder, zoneIndex):
    builder.PrependUint32Slot(1, zoneIndex, 0)


def AddZoneIndex(builder, zoneIndex):
    UniqueShortcutEntryAddZoneIndex(builder, zoneIndex)


def UniqueShortcutEntryEnd(builder):
    return builder.EndObject()


def End(builder):
    return UniqueShortcutEntryEnd(builder)
