# automatically generated by the FlatBuffers compiler, do not modify

# namespace: shortcuts_uint8

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class PolygonList:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PolygonList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPolygonList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # PolygonList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PolygonList
    def PolyIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2),
            )
        return 0

    # PolygonList
    def PolyIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # PolygonList
    def PolyIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PolygonList
    def PolyIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def PolygonListStart(builder):
    builder.StartObject(1)


def Start(builder):
    PolygonListStart(builder)


def PolygonListAddPolyIds(builder, polyIds):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(polyIds), 0
    )


def AddPolyIds(builder, polyIds):
    PolygonListAddPolyIds(builder, polyIds)


def PolygonListStartPolyIdsVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)


def StartPolyIdsVector(builder, numElems):
    return PolygonListStartPolyIdsVector(builder, numElems)


def PolygonListEnd(builder):
    return builder.EndObject()


def End(builder):
    return PolygonListEnd(builder)
