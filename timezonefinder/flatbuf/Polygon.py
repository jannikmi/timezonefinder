# automatically generated by the FlatBuffers compiler, do not modify

# namespace: timezonefinder

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Polygon:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Polygon()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPolygon(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Polygon
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Polygon
    def XCoords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # Polygon
    def XCoordsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Polygon
    def XCoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Polygon
    def XCoordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Polygon
    def YCoords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # Polygon
    def YCoordsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Polygon
    def YCoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Polygon
    def YCoordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0


def PolygonStart(builder):
    builder.StartObject(2)


def Start(builder):
    PolygonStart(builder)


def PolygonAddXCoords(builder, xCoords):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(xCoords), 0
    )


def AddXCoords(builder, xCoords):
    PolygonAddXCoords(builder, xCoords)


def PolygonStartXCoordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartXCoordsVector(builder, numElems):
    return PolygonStartXCoordsVector(builder, numElems)


def PolygonAddYCoords(builder, yCoords):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(yCoords), 0
    )


def AddYCoords(builder, yCoords):
    PolygonAddYCoords(builder, yCoords)


def PolygonStartYCoordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartYCoordsVector(builder, numElems):
    return PolygonStartYCoordsVector(builder, numElems)


def PolygonEnd(builder):
    return builder.EndObject()


def End(builder):
    return PolygonEnd(builder)
