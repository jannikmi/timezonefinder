# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class UniqueShortcutCollection:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UniqueShortcutCollection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUniqueShortcutCollection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # UniqueShortcutCollection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UniqueShortcutCollection
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 1

    # UniqueShortcutCollection
    def ZoneIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # UniqueShortcutCollection
    def ZoneIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # UniqueShortcutCollection
    def ZoneIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UniqueShortcutCollection
    def ZoneIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UniqueShortcutCollection
    def Entries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from timezonefinder.flatbuf.UniqueShortcutEntry import UniqueShortcutEntry

            obj = UniqueShortcutEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UniqueShortcutCollection
    def EntriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UniqueShortcutCollection
    def EntriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0


def UniqueShortcutCollectionStart(builder):
    builder.StartObject(3)


def Start(builder):
    UniqueShortcutCollectionStart(builder)


def UniqueShortcutCollectionAddWidth(builder, width):
    builder.PrependUint8Slot(0, width, 1)


def AddWidth(builder, width):
    UniqueShortcutCollectionAddWidth(builder, width)


def UniqueShortcutCollectionAddZoneIds(builder, zoneIds):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneIds), 0
    )


def AddZoneIds(builder, zoneIds):
    UniqueShortcutCollectionAddZoneIds(builder, zoneIds)


def UniqueShortcutCollectionStartZoneIdsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def StartZoneIdsVector(builder, numElems):
    return UniqueShortcutCollectionStartZoneIdsVector(builder, numElems)


def UniqueShortcutCollectionAddEntries(builder, entries):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(entries), 0
    )


def AddEntries(builder, entries):
    UniqueShortcutCollectionAddEntries(builder, entries)


def UniqueShortcutCollectionStartEntriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartEntriesVector(builder, numElems):
    return UniqueShortcutCollectionStartEntriesVector(builder, numElems)


def UniqueShortcutCollectionEnd(builder):
    return builder.EndObject()


def End(builder):
    return UniqueShortcutCollectionEnd(builder)
