# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class PolygonCollection:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PolygonCollection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPolygonCollection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # PolygonCollection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PolygonCollection
    def Polygons(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from timezonefinder.flatbuf.Polygon import Polygon

            obj = Polygon()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PolygonCollection
    def PolygonsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PolygonCollection
    def PolygonsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def PolygonCollectionStart(builder):
    builder.StartObject(1)


def Start(builder):
    PolygonCollectionStart(builder)


def PolygonCollectionAddPolygons(builder, polygons):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(polygons), 0
    )


def AddPolygons(builder, polygons):
    PolygonCollectionAddPolygons(builder, polygons)


def PolygonCollectionStartPolygonsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartPolygonsVector(builder, numElems):
    return PolygonCollectionStartPolygonsVector(builder, numElems)


def PolygonCollectionEnd(builder):
    return builder.EndObject()


def End(builder):
    return PolygonCollectionEnd(builder)
