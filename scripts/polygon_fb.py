# This file is auto-generated by the FlatBuffers compiler (flatc) from polygon.fbs.
# To regenerate, run: flatc --python polygon.fbs
# This is a minimal stub for demonstration. Replace with the real generated code after running flatc.

# polygon_fb.py (stub)
import flatbuffers


class Polygon:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsPolygon(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Polygon()
        x.Init(buf, n + offset)
        return x

    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    def XCoords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    def XCoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o == 0:
            return 0
        return self._tab.VectorLen(o)

    def YCoords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    def YCoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o == 0:
            return 0
        return self._tab.VectorLen(o)


def PolygonStart(builder):
    builder.StartObject(2)


def PolygonAddXCoords(builder, xCoords):
    builder.PrependUOffsetTRelativeSlot(0, xCoords, 0)


def PolygonStartXCoordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def PolygonAddYCoords(builder, yCoords):
    builder.PrependUOffsetTRelativeSlot(1, yCoords, 0)


def PolygonStartYCoordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def PolygonEnd(builder):
    return builder.EndObject()
