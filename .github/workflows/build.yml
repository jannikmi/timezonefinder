name: build

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'
  workflow_dispatch:

env:
  # the supported Python versions for pre-built wheels
  CIBW_BUILD_VERSIONS: "cp39-* cp310-* cp311-* cp312-* cp313-*"

jobs:
  pre-commit-hooks:
    name: run pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run pre-commit hook
        uses: pre-commit/action@v3.0.1

  test:
    runs-on: ubuntu-latest
    strategy:
      # By default, GitHub will maximize the number of jobs run in parallel
      # depending on the available runners on GitHub-hosted virtual machines.
      # max-parallel: 8
      fail-fast: false
      matrix:
        # all officially supported Python versions should be tested
        # NOTE: need to match the versions in pyproject.toml > tox.ini
        include:
          - python-version: "3.9"
            tox-env: "py39,py39-numba,py39-pytz"
          - python-version: "3.10"
            tox-env: "py310,py310-numba,py310-pytz"
          - python-version: "3.11"
            tox-env: "py311,py311-numba,py311-pytz"
          - python-version: "3.12"
            tox-env: "py312,py312-numba,py312-pytz,docs"
          - python-version: "3.13"
            # TODO add numba as soon as it supports Python 3.13
            tox-env: "py313,py313-pytz,integration"
    env:
      TOX_SKIP_MISSING_INTERPRETERS: False
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install test dependencies
        run: uv sync --group test

      - name: Run tox
        run: uv run tox -e ${{ matrix.tox-env }}

  make-wheels:
    name: Make ${{ matrix.os }} ${{ matrix.cibw_arch }} wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        cibw_arch: ["native"]
      fail-fast: false

    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4

      - name: "Build wheels"
        uses: pypa/cibuildwheel@v3.1.1
        with:
          output-dir: dist
        env:
          # https://github.com/pypa/cibuildwheel/blob/v2.23.1/cibuildwheel/resources/pinned_docker_images.cfg
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64:2025.03.09-1
          CIBW_MUSLLINUX_X86_64_IMAGE: quay.io/pypa/musllinux_1_1_x86_64:2024.10.26-1
          CIBW_BUILD: ${{ env.CIBW_BUILD_VERSIONS }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BUILD_FRONTEND: pip
          CIBW_BEFORE_ALL_LINUX_MANYLINUX2014: yum install -y libffi-devel clang make
          CIBW_BEFORE_ALL_LINUX_MUSLLINUX_1_1: apk add --no-cache libffi-dev clang make
          CIBW_BUILD_VERBOSITY: 1

      - name: "Upload wheel as artifact"
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.cibw_arch }}-wheel
          path: "./**/dist/*.whl"

  make-sdist:
    name: Make source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - run: uv build -v --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-source-dist
        path: "./**/dist/*.tar.gz"

  end-to-end-test:
    runs-on: ubuntu-latest
    needs: [make-wheels]
    strategy:
        fail-fast: false
        matrix:
            uv-python-version: ["cp39", "cp310", "cp311", "cp312", "cp313"]
    steps:
      # Only install uv without creating a project
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          ignore-empty-workdir: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Copy artifacts to dist/ folder
        run: |
          find . -name 'artifact-*.zip' -print -exec unzip '{}' \;
          mkdir -p dist/
          find . -name '*.tar.gz' -exec mv '{}' dist/ \;
          find . -name '*.whl' -exec mv '{}' dist/ \;
          ls -lR dist/

      - name: Run end-to-end test
        run: |
            find .
            uv init --name e2e --python ${{ matrix.uv-python-version }} --bare
            uv add ./dist/timezonefinder*${{ matrix.uv-python-version }}*manylinux*whl
            uv tree
            uv run python3 -c 'from timezonefinder import TimezoneFinder; tf = TimezoneFinder(); result = tf.timezone_at(lat=40.5, lng=11.7); assert(result == "Etc/GMT-1")'

  release:
    name: Create release and publish to TestPyPI
    runs-on: ubuntu-latest
    # Note: only run, when test publishing worked
    needs: [test, make-wheels, make-sdist, end-to-end-test, pre-commit-hooks]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    permissions:
        id-token: write
        contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Upgrade pip version
        run: pip install --upgrade pip

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Fetch version
        id: fetch_version
        run: echo "version_nr=$(uv version --short)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Copy artifacts to dist/ folder
        run: |
          find . -name 'artifact-*.zip' -print -exec unzip '{}' \;
          mkdir -p dist/
          find . -name '*.tar.gz' -exec mv '{}' dist/ \;
          find . -name '*.whl' -exec mv '{}' dist/ \;
          ls -lR dist/

      # TODO re-enable Test PyPI publishing. disabled due to project size limits
      # -   name: Test PyPI Publishing
      #     # NOTE: PRs from forks fail due to: "missing or insufficient OIDC token permissions,
      #     #  the ACTIONS_ID_TOKEN_REQUEST_TOKEN environment variable was unset"
      #     # -> test publishing cannot be triggered in PRs?!
      #     uses: pypa/gh-action-pypi-publish@release/v1
      #     with:
      #         password: ${{ secrets.TEST_PYPI_DEPLOYMENT_API_KEY }}
      #         repository-url: https://test.pypi.org/legacy/
      #         skip-existing: true

      - name: Create GitHub Release
        id: create_gh_release
        uses: ncipollo/release-action@v1
        env:
          VERSION: ${{ steps.fetch_version.outputs.version_nr }}
        with:
          tag: ${{env.VERSION}}
          name: Release ${{env.VERSION}}
          draft: false
          prerelease: false
          skipIfReleaseExists: true
          artifacts: "dist/timezonefinder*.whl,dist/timezonefinder*.tar.gz"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
        id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Upgrade pip version
        run: pip install --upgrade pip

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Fetch version
        id: fetch_version
        run: echo "version_nr=$(uv version --short)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Copy artifacts to dist/ folder
        run: |
          find . -name 'artifact-*' -exec unzip '{}' \;
          mkdir -p dist/
          find . -name '*.tar.gz' -exec mv '{}' dist/ \;
          find . -name '*.whl' -exec mv '{}' dist/ \;
          ls -lR dist/

      - name: PyPI Publishing
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_DEPLOYMENT_API_KEY }}
          skip-existing: true
